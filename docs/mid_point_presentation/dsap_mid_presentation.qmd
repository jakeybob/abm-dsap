---
title: "An Agent Based Infectious Disease Model"
subtitle: "Data Science Accelerator Programme (mid-point update)"
title-slide-attributes:
    data-background-image: "presentation_files/phs_title_slide_background_1200x900.png"
    data-background-size: contain
    data-background-opacity: "1"
width: 1200
height: 900
author:
  name: Bob Taylor
date: 10/27/2022
date-format: long
format: 
  revealjs:
    css: presentation_files/presentation.css
    chalkboard: true
---

## {background-color="#7030A0"}

<p>&nbsp;</p>
[Recap]{style="color: white; font-weight: bold; font-size: 80px"}
<p>&nbsp;</p>
[Progress]{style="color: white; font-weight: bold; font-size: 80px"}
<p>&nbsp;</p>
[Changes]{style="color: white; font-weight: bold; font-size: 80px"}
<p>&nbsp;</p>
[Next Steps...]{style="color: white; font-weight: bold; font-size: 80px"}

::: {.notes}
**Recap:** quick reminder on what my project proposal was, what agent based modelling is and why it's useful

**Progress:** what have I been up to -- what has been done so far?

**Changes:** what has changed in terms of goals etc since week 1, and why?

**Next Steps:** what I expect to be getting on with next
:::


# Recap {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}

**<u>Traditional</u>** (e.g. SEIR models)

* large sets of differential equations solved numerically

* global outcomes based on system-wide behaviours

:::

<figure>
<img src="pics/seir.png" class="centerimg50">
  <figcaption style="font-size: medium"><a href="https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology">en.wikipedia.org/wiki/Compartmental_models_in_epidemiology</a></figcaption>
</figure>

::: {.notes}
TYPICALLY

**S**usceptible
**E**xposed
**I**nfected
**R**ecovered

... give smooth continuous estimates of global outcomes estimated from system wide behaviours

TOP DOWN methodology where you set population level parameters

:::


## {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}

**<u>Agent Based Models</u>**

* individual agents given *behaviours* and *attributes*

* allowed to *interact*, make decisions $\rightarrow$ evolve; e.g. become infected, admitted to hospital etc

:::

ABMs can effectively replicate SEIR models...

::: {layout-ncol=3}
![**10 agents**](pics/sir_10.png)

![**100 agents**](pics/sir_100.png)

![**1,000 agents**](pics/sir_1000.png)
:::

::: {.notes}
ABMs take a **BOTTOM UP** approach...

Individual agents; time stepped

PLOTS show that ABMs replicate continuous models for *large* numbers of agents who all have the *same* properties


Might say 5% of people have flu for continuous approach, or *these* 50 out of 1000 have flu

$\Beta$ = probability of a contact causing an infection
c = poisson expectation of number of expected contacts in each time step


:::


## {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}

**<u>Project Proposal</u>**

* produce Julia code to model variety of ABM disease transmission scenarios
<p>&nbsp;</p>
* interactive notebooks and/or web apps (allow users to create their own mopdels)
<p>&nbsp;</p>
* stretch goal: web API service

:::

::: {.notes}
* produce Julia code to model variety of ABM disease transmission scenarios
* interactive notebooks and/or web apps (allow users to create their own mopdels)
* stretch goal: web API service
:::


# Progress {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}
* investigated `Agents.jl` library
* produced working 0D / 2D agent based disease models

:::

::: {layout-ncol=2}
![](pics/abm_test_false.mp4)

![](pics/osm_test_glasgow.mp4)
:::

::: {.notes}
* investigated the capabilities of the Agents.jl library
* produced working agent based disease models
:::


## {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}
&nbsp;
:::

::: {layout-ncol=2}
![](pics/pic.png)

* mistakes may have occurred
<p>&nbsp;</p>
* lessons learned
<p>&nbsp;</p>
* now compiling example notebooks for MVP
<p>&nbsp;</p>
* started looking at how to narrow scopr for 2D models
:::

::: {.notes}
* mistakes: accidentally messed up the agent collision physics so they continually accelerated past the speed of light
* ended up being useful as to debug that I had to figure out how to extract information from the model while running
* now compiling example notebooks for MVP
* started looking at how to narrow scopr for 2D models
:::


# Changes {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}
 * **initial focus** $\Rightarrow$ interactive notebooks and apps 
<p>&nbsp;</p>

 * **now** $\Rightarrow$ separate *visualisation* from *simulation*
<p>&nbsp;</p>

 * allows wider availability / interoperability
<p>&nbsp;</p>

 * (also more manageable in retrospect)
:::

::: {.notes}
initial focus: had more emphasis on notebook and interactive app outputs

now: still have some notebooks, but shifting away from interactive web apps and hive off the simulation aspect -- so aim to have a web service that anyone can query from any environment (R, Python etc)
:::


# Next Steps... {background-image="presentation_files/phs_slide_background_1200x900.png" background-size="contain"}

::: {style="font-size: 1.25em"}
* wrap up MVP (user interactive notebooks, deploy via e.g. [binder](https://mybinder.org/))
<p>&nbsp;</p>
* further develop 2D models (explore grid/graph types)
<p>&nbsp;</p>
* deploy as queryable service (AWS?)
<p>&nbsp;</p>
* write up docs etc!
:::

::: {.notes}
* wrap up MVP (user interactive notebooks, deploy via e.g. [binder](https://mybinder.org/))
* further develop 2D models (explore grid/graph types)
* deploy as queryable service (AWS?)
* write up docs etc!
:::


# {background-color="#002060" transition="zoom"}

[Questions...?]{style="color: white; font-weight: bold; font-size: 120px"}

::: {.notes}

Why Julia?

R best option for 90% of people 90% of the time.

But for ABMs – 
R has no real library
NetLogo is single-purpose
Python does have Mesa library, but less fully featured

Julia is new, has good ABM library, lots of potential, very “tidy”, good package management etc

Something of a “middle ground” between R and Python

Is kind of what DSAP is for -- testing / trying new stuff.

:::